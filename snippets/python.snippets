priority 1

global !p
def pluralize(text):
	if text.endswith("s") or text.endswith("sh"):
		return text + "es"
	else:
		return text + "s"

def camel_to_snake(text):
    return re.sub(r"(?<!^)(?=[A-Z])", "_", text).lower()
endglobal

snippet class "class definition" b
class ${1:MyClass}:
	def __init__(self$2):
		${3:${VISUAL:pass}}
$0
endsnippet

snippet docclass "class with docstrings" b
class ${1:MyClass}(${2:object}):

	`!p snip.rv = triple_quotes(snip)`${3:Docstring for $1. }`!p snip.rv = triple_quotes(snip)`

	def __init__(self$4):
		`!p snip.rv = triple_quotes(snip)`${5:TODO: to be defined.}`!p
snip.rv = ""
snip >> 2

args = get_args(t[4])

write_docstring_args(args, snip)
if args:
	snip.rv += '\n' + snip.mkline('', indent='')
	snip += '{0}'.format(triple_quotes(snip))

write_init_body(args, t[2], snip)
`
		$0
endsnippet

snippet parametrize "pytest parametrize annotation" b
@pytest.mark.parametrize(
	("${1:param1}",),
	[
		(
			${2:value1},
		),
	],
)
$0
endsnippet

snippet asyncpytest "async pytest test case" b
@pytest.mark.asyncio
def ${1:test_case_name}($2) -> None:
	${3:${VISUAL:pass}}
$0
endsnippet

snippet fixture "pytest fixture" b
@pytest.fixture
def ${1:fixture_name}($2) -> ${3:None}:
	${4:${VISUAL:pass}}
$0
endsnippet

snippet aufixture "pytest autouse fixture" b
@pytest.fixture(autouse=True)
def ${1:fixture_name}($2) -> ${3:None}:
	${4:${VISUAL:pass}}
$0
endsnippet

snippet samodel "sqlalchemy model" b
class ${1:MyModel}(${2:Base}):
	__tablename__ = "${3:`!p snip.rv = pluralize(camel_to_snake(t[1]))`}"

	${4:${VISUAL:id = Column(Integer, primary_key=True)}}
	${5:${VISUAL:column}}
endsnippet
